// Generated by CoffeeScript 1.3.3
(function() {

  describe("the backbone elements plugin", function() {
    var View, should;
    should = chai.should();
    View = Backbone.View;
    beforeEach(function() {
      this.clickChildSpy = sinon.spy();
      this.theView = new (View.extend({
        el: $("#test"),
        elements: {
          ".test-child": "child",
          "$child .test-child-element": "childElement",
          ".test-empty-element": "emptyElement",
          "$notExistElement li": "it_may_call_stack_overflow"
        },
        events: {
          "click $child": this.clickChildSpy
        }
      }));
      return this.$child = this.theView.$child();
    });
    describe("the elements attribute", function() {
      it("should be work", function() {
        return this.theView.elements.should.exist;
      });
      return it("should extend elements attribute of view options", function() {
        var newView;
        newView = new View({
          el: $("#test"),
          elements: {
            ".test-child": "child"
          }
        });
        return newView.elements.should.exist;
      });
    });
    describe("the element prefix attribute", function() {
      it("should be work", function() {
        return this.theView.should.have.property(this.theView.elementsPrefix + "child");
      });
      return it("should be a function", function() {
        return this.theView[this.theView.elementsPrefix + "child"].should.be.a("function");
      });
    });
    describe("the select method", function() {
      it("should be work", function() {
        return this.$child[0].should.equal(this.theView.$(".test-child")[0]);
      });
      return it("should return child element when input selector string", function() {
        return this.theView.$child(".test-child-element")[0].should.equal(this.theView.$(".test-child .test-child-element")[0]);
      });
    });
    describe("the select symbol", function() {
      it("should work in elements selector", function() {
        return this.theView.$childElement()[0].should.equal(this.theView.$child(".test-child-element")[0]);
      });
      it("should be parsed in all select case", function() {
        var specialCase, specialCases, unableCase, _i, _len;
        specialCases = ["#aaa", ".aaa", ",aaa", " aaa", ">aaa", "+aaa", "~aaa", "[attr='aaa']", ":after"];
        unableCase = specialCases.join("");
        for (_i = 0, _len = specialCases.length; _i < _len; _i++) {
          specialCase = specialCases[_i];
          this.theView.parseSelectorSymbol("$child" + specialCase).should.equal(".test-child" + specialCase);
        }
        this.theView.parseSelectorSymbol("$child" + unableCase).should.equal(".test-child" + unableCase);
        return this.theView.parseSelectorSymbol(specialCases.join("$child")).should.equal(specialCases.join(".test-child"));
      });
      it("should work in events selector", function() {
        this.$child.trigger("click");
        return this.clickChildSpy.called.should.be["true"];
      });
      return it("should work in `this.$` selector", function() {
        return this.theView.$("$child")[0].should.equal(this.theView.$(".test-child")[0]);
      });
    });
    describe("the elementsPrefix attribute", function() {
      return it("should could be changed", function() {
        var newView;
        newView = new View({
          el: $("#test"),
          elementsPrefix: "sym_",
          elements: {
            ".test-child": "child"
          }
        });
        return newView.should.have.property("sym_child").and.that.should.not.have.property("$child");
      });
    });
    describe("the elements cache", function() {
      it("should be work", function() {
        this.theView.$("$child").should.not.equal(this.theView.$("$child"));
        return this.$child.should.equal(this.theView.$child());
      });
      return it("should not cache when element not exist", function() {
        return this.theView.$emptyElement().should.not.equal(this.theView.$emptyElement());
      });
    });
    describe("the refreshElements method", function() {
      it("should be work", function() {
        this.theView.refreshElements();
        return this.$child.should.not.equal(this.theView.$child());
      });
      it("should refresh element cache when input true", function() {
        this.$child.should.not.equal(this.theView.$child(true));
        this.theView.$child(true).should.not.equal(this.theView.$child(true));
        return this.theView.$child(true).should.equal(this.theView.$child());
      });
      return it("should refresh events bind when refresh elements cache", function() {
        var $oldChild;
        $oldChild = this.theView.$child();
        this.theView.elements = {
          ".other-element": "child"
        };
        this.theView.refreshElements();
        $oldChild.trigger("click");
        this.clickChildSpy.called.should.be["false"];
        this.theView.$child().trigger("click");
        return this.clickChildSpy.called.should.be["true"];
      });
    });
    return describe("the clearElements method", function() {
      return it("should be work", function() {
        var property, _i, _len, _ref, _results;
        this.theView.clearElements();
        _ref = ["_reverseElements", "_elementsCache", "_regPrefix"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          property = _ref[_i];
          _results.push(this.theView.should.not.have.property(property));
        }
        return _results;
      });
    });
  });

}).call(this);
