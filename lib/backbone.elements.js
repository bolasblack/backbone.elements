// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function(jQuery, _, Backbone, console) {
    var delegateEvents, nop, original$, reEscape, _configure, _ref;
    nop = function() {};
    if (console == null) {
      console = {
        log: nop,
        warn: nop,
        error: nop
      };
    }
    reEscape = function(str, skipChar) {
      var char, re, reSpecialChar, _i, _len;
      if (skipChar == null) {
        skipChar = [];
      }
      reSpecialChar = ["\\", "/", ",", ".", "|", "^", "$", "?", "+", "*", "[", "]", "{", "}", "(", ")"];
      for (_i = 0, _len = reSpecialChar.length; _i < _len; _i++) {
        char = reSpecialChar[_i];
        if (!(__indexOf.call(skipChar, char) < 0)) {
          continue;
        }
        re = RegExp("\\" + char, "g");
        str = str.replace(re, "\\" + char);
      }
      return str;
    };
    _ref = Backbone.View.prototype, original$ = _ref.$, _configure = _ref._configure, delegateEvents = _ref.delegateEvents;
    return _.extend(Backbone.View.prototype, {
      _elementsSymbolSpliter: ["\\#", "\\.", "\\,", "\\s", "\\>", "\\+", "\\~", "\\[", "\\:"],
      elementsPrefix: "$",
      $: function(selector) {
        return original$.call(this, this.parseSelectorSymbol(selector));
      },
      _configure: function(options) {
        var dispose;
        _configure.apply(this, arguments);
        _.extend(this, _.pick(options, ["elements", "elementsPrefix"]));
        this._initElements();
        if (_.isFunction(this.dispose)) {
          dispose = this.dispose;
          return this.dispose = function() {
            dispose.apply(this, arguments);
            return this.clearElements();
          };
        }
      },
      delegateEvents: function(events) {
        var finalEvents, handerName, newSelector, selector;
        if (!(events || (events = _.result(this, "events")))) {
          return delegateEvents.apply(this, arguments);
        }
        finalEvents = {};
        for (selector in events) {
          handerName = events[selector];
          newSelector = this.parseSelectorSymbol(selector);
          finalEvents[newSelector] = handerName;
        }
        return delegateEvents.call(this, finalEvents);
      },
      refreshElements: function() {
        var selector, varName, _ref1;
        this.undelegateEvents();
        _ref1 = this.elements;
        for (selector in _ref1) {
          varName = _ref1[selector];
          delete this[this.elementsPrefix + varName];
        }
        this._initElements();
        return this.delegateEvents();
      },
      clearElements: function() {
        var elementSelectors, property, selector, _i, _j, _len, _len1, _ref1, _results;
        elementSelectors = _(this._reverseElements).keys();
        for (_i = 0, _len = elementSelectors.length; _i < _len; _i++) {
          selector = elementSelectors[_i];
          delete this[this.elementsPrefix + selector];
        }
        _ref1 = ["_reverseElements", "_elementsCache", "_regPrefix"];
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          property = _ref1[_j];
          _results.push(delete this[property]);
        }
        return _results;
      },
      parseSelectorSymbol: function(selector) {
        var cannotParseSymbols, elementSymbol, elementsSelectorRE, endReStr, parsedSelector,
          _this = this;
        endReStr = this._elementsSymbolSpliter.join("|");
        elementsSelectorRE = RegExp("" + this._regPrefix + "([^" + (this._negativeReStr()) + "]*)(?=" + endReStr + "|$)", "g");
        cannotParseSymbols = [];
        elementSymbol = null;
        while ((function(selector, elementsSelectorRE) {
            var matchs;
            matchs = selector.match(elementsSelectorRE);
            if (!matchs) {
              return false;
            }
            elementSymbol = jQuery.trim(matchs[0]);
            if (__indexOf.call(cannotParseSymbols, elementSymbol) >= 0) {
              return false;
            }
            return true;
          })(selector, elementsSelectorRE)) {
          parsedSelector = this._parseSymbol(elementSymbol);
          if (RegExp(reEscape(elementSymbol)).test(parsedSelector)) {
            cannotParseSymbols.push(elementSymbol);
            console.warn("element symbol", elementSymbol, "not exist");
          } else {
            selector = selector.replace(elementSymbol, parsedSelector);
          }
        }
        return selector;
      },
      _parseSymbol: function(elementSymbol) {
        var elementName, elementNameRE;
        elementNameRE = RegExp("" + this._regPrefix + "([^" + (this._negativeReStr()) + "]*)");
        elementName = elementSymbol.match(elementNameRE)[1];
        return this._reverseElements[elementName] || elementSymbol;
      },
      _generateShortcut: function(varName, selector) {
        var _this = this;
        selector = this.parseSelectorSymbol(selector);
        return this[this.elementsPrefix + varName] = function(subSelector, refresh) {
          var $elem, _ref1;
          if (subSelector === true || subSelector === false) {
            _ref1 = [void 0, subSelector], subSelector = _ref1[0], refresh = _ref1[1];
          }
          $elem = refresh ? _this.$(selector) : _this._elementsCache[varName] || _this.$(selector);
          if (!$elem.length) {
            return $elem;
          }
          _this._elementsCache[varName] = $elem;
          if (!subSelector) {
            return $elem;
          }
          return $elem.find(subSelector);
        };
      },
      _initElements: function() {
        if (!this.elements) {
          return;
        }
        this._refreshVarible();
        return _(this.elements).forEach($.proxy(this._generateShortcut, this));
      },
      _refreshVarible: function() {
        var k, v;
        this._reverseElements = _.object((function() {
          var _ref1, _results;
          _ref1 = this.elements;
          _results = [];
          for (k in _ref1) {
            v = _ref1[k];
            _results.push([v, k]);
          }
          return _results;
        }).call(this));
        this._regPrefix = reEscape(this.elementsPrefix);
        return this._elementsCache = {};
      },
      _negativeReStr: function() {
        return (this._elementsSymbolSpliter.join("")) + this._regPrefix;
      }
    });
  })(jQuery, _, Backbone, console);

}).call(this);
