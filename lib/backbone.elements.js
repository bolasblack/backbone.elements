// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($, _, Backbone) {
    var View, reEscape;
    reEscape = function(str) {
      return str.replace(/\\/g, "\\\\").replace(/\//g, "\\/").replace(/\,/g, "\\,").replace(/\./g, "\\.").replace(/\^/g, "\\^").replace(/\$/g, "\\$").replace(/\|/g, "\\|").replace(/\?/g, "\\?").replace(/\+/g, "\\+").replace(/\*/g, "\\*").replace(/\[/g, "\\[").replace(/\]/g, "\\]").replace(/\{/g, "\\{").replace(/\}/g, "\\}").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
    };
    View = Backbone.View;
    return Backbone.View = (function(_super) {

      __extends(View, _super);

      function View() {
        return View.__super__.constructor.apply(this, arguments);
      }

      View.prototype.elementsPrefix = "$";

      View.prototype._configure = function(options) {
        View.__super__._configure.apply(this, arguments);
        _.extend(this, _.pick(options, ["elements", "elementsPrefix"]));
        return this.initElements();
      };

      View.prototype.initElements = function() {
        var selector, varName, _ref, _results,
          _this = this;
        if (!this.elements) {
          return;
        }
        this._refreshVarible();
        _ref = this.elements;
        _results = [];
        for (selector in _ref) {
          varName = _ref[selector];
          selector = this._parseSymbolSelector(selector);
          _results.push((function(selector, varName) {
            return _this[_this.elementsPrefix + varName] = function(subSelector, refresh) {
              var $elem, _ref1;
              if (subSelector === true || subSelector === false) {
                _ref1 = [void 0, subSelector], subSelector = _ref1[0], refresh = _ref1[1];
              }
              $elem = refresh ? _this.$(selector) : _this._elementsCache[varName] || _this.$(selector);
              if (!$elem.length) {
                return $elem;
              }
              _this._elementsCache[varName] = $elem;
              if (!subSelector) {
                return $elem;
              }
              return $elem.find(subSelector);
            };
          })(selector, varName));
        }
        return _results;
      };

      View.prototype.refreshElements = function() {
        var selector, varName, _ref;
        this.undelegateEvents();
        _ref = this.elements;
        for (selector in _ref) {
          varName = _ref[selector];
          delete this[this.elementsPrefix + varName];
        }
        this._refreshVarible();
        return this.initElements();
      };

      View.prototype.$ = function(selector) {
        return View.__super__.$.call(this, this._parseSymbolSelector(selector));
      };

      View.prototype._refreshVarible = function() {
        var k, v;
        this._reverseElements = _.object((function() {
          var _ref, _results;
          _ref = this.elements;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push([v, k]);
          }
          return _results;
        }).call(this));
        this._regPrefix = reEscape(this.elementsPrefix);
        return this._elementsCache = {};
      };

      View.prototype._parseSymbol = function(elementSymbol) {
        var elementName, elementNameRE;
        elementNameRE = RegExp("" + this._regPrefix + "([^\\s" + this._regPrefix + "]*)");
        elementName = elementSymbol.match(elementNameRE)[1];
        return this._reverseElements[elementName] || elementSymbol;
      };

      View.prototype._parseSymbolSelector = function(selector) {
        var elementSymbol, elementsSelectorRE, eventSelector, matchs;
        elementsSelectorRE = RegExp("" + this._regPrefix + "([^\\s" + this._regPrefix + "]*)(\\s|$)", "g");
        while (matchs = selector.match(elementsSelectorRE)) {
          elementSymbol = $.trim(matchs[0]);
          eventSelector = this._parseSymbol(elementSymbol);
          selector = selector.replace(elementSymbol, eventSelector);
        }
        return selector;
      };

      View.prototype.delegateEvents = function(events) {
        var finalEvents, handerName, newSelector, selector;
        if (!(events || (events = _.result(this, "events")))) {
          return View.__super__.delegateEvents.apply(this, arguments);
        }
        finalEvents = {};
        for (selector in events) {
          handerName = events[selector];
          newSelector = this._parseSymbolSelector(selector);
          finalEvents[newSelector] = handerName;
        }
        return View.__super__.delegateEvents.call(this, finalEvents);
      };

      return View;

    })(View);
  })($, _, Backbone);

}).call(this);
