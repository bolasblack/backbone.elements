// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($, _, Backbone) {
    var View, reEscape;
    reEscape = function(str) {
      return str.replace(/\\/g, "\\\\").replace(/\//g, "\\/").replace(/\,/g, "\\,").replace(/\./g, "\\.").replace(/\^/g, "\\^").replace(/\$/g, "\\$").replace(/\|/g, "\\|").replace(/\?/g, "\\?").replace(/\+/g, "\\+").replace(/\*/g, "\\*").replace(/\[/g, "\\[").replace(/\]/g, "\\]").replace(/\{/g, "\\{").replace(/\}/g, "\\}").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
    };
    View = Backbone.View;
    return Backbone.View = (function(_super) {

      __extends(View, _super);

      function View(options) {
        View.__super__.constructor.apply(this, arguments);
        this.initElements();
      }

      View.prototype._configure = function(options) {
        View.__super__._configure.apply(this, arguments);
        return _.extend(this, _.pick(options, ["elements", "elementsPrefix"]));
      };

      View.prototype.elements = false;

      View.prototype.elementsPrefix = "$";

      View.prototype.initElements = function() {
        var cache, selector, varName, _fn, _ref,
          _this = this;
        if (!this.elements) {
          return;
        }
        cache = {};
        _ref = this.elements;
        _fn = function(selector, varName) {
          return _this[_this.elementsPrefix + varName] = function(subSelector, refresh) {
            var $elem, _ref1;
            if (subSelector === true || subSelector === false) {
              _ref1 = [void 0, subSelector], subSelector = _ref1[0], refresh = _ref1[1];
            }
            $elem = refresh ? _this.$(selector) : cache[varName] || _this.$(selector);
            if (!$elem.length) {
              return $elem;
            }
            cache[varName] = $elem;
            if (!subSelector) {
              return $elem;
            }
            return $elem.find(subSelector);
          };
        };
        for (selector in _ref) {
          varName = _ref[selector];
          _fn(selector, varName);
        }
        return this.refreshElements = function() {
          var _ref1;
          this.undelegateEvents();
          cache = {};
          _ref1 = this.elements;
          for (selector in _ref1) {
            varName = _ref1[selector];
            delete this[this.elementsPrefix + varName];
          }
          return this.initElements();
        };
      };

      View.prototype.refreshElements = function() {};

      View.prototype.$ = function(selector) {
        return View.__super__.$.call(this, this._parseSymbolSelector(selector));
      };

      View.prototype._parseSymbol = function(elementSymbol) {
        var elementName, elementNameRE, k, regPrefix, reverseElements, v;
        regPrefix = reEscape(this.elementsPrefix);
        elementNameRE = RegExp("" + regPrefix + "([^\\s" + regPrefix + "]*)");
        reverseElements = _.object((function() {
          var _ref, _results;
          _ref = this.elements;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push([v, k]);
          }
          return _results;
        }).call(this));
        elementName = elementSymbol.match(elementNameRE)[1];
        return reverseElements[elementName] || elementSymbol;
      };

      View.prototype._parseSymbolSelector = function(selector) {
        var elementSymbol, elementsSelectorRE, eventSelector, matchs, regPrefix;
        regPrefix = reEscape(this.elementsPrefix);
        elementsSelectorRE = RegExp("" + regPrefix + "([^\\s" + regPrefix + "]*)(\\s|$)", "g");
        while (matchs = selector.match(elementsSelectorRE)) {
          elementSymbol = $.trim(matchs[0]);
          eventSelector = this._parseSymbol(elementSymbol);
          selector = selector.replace(elementSymbol, eventSelector);
        }
        return selector;
      };

      View.prototype.delegateEvents = function(events) {
        var finalEvents, handerName, newSelector, selector;
        if (!(events || (events = _.result(this, "events")))) {
          return View.__super__.delegateEvents.apply(this, arguments);
        }
        finalEvents = {};
        for (selector in events) {
          handerName = events[selector];
          newSelector = this._parseSymbolSelector(selector);
          finalEvents[newSelector] = handerName;
        }
        return View.__super__.delegateEvents.call(this, finalEvents);
      };

      return View;

    })(View);
  })($, _, Backbone);

}).call(this);
